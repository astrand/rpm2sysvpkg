#!/usr/bin/env python
# -*-mode: python; coding: iso-8859-1 -*-
#
# Copyright (c) 2004 Cendio AB. All rights reserved.
# Author: Peter Åstrand <peter@cendio.se>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

import sys
import getopt
import tempfile
import os
import popen2
import string
import stat
import shutil

# SysV says 9, but APDG says 32
PKGABBREV_MAX = 32


def get_origin_dir():
    startdir = os.getcwd()
    os.chdir(os.path.dirname(sys.argv[0]))
    origin = os.getcwd()
    os.chdir(startdir)
    return origin

ORIGIN = get_origin_dir()


class RpmFileInfo:
    def __init__(self, path, size, mtime, md5sum, mode, owner, group,
                 isconfig, isdoc, rdev, symlink):
        self.path = path
        self.size = int(size)
        self.mtime = int(mtime)
        self.md5sum = md5sum
        self.mode = int(mode, 8)
        self.owner = owner
        self.group = group
        self.isconfig = int(isconfig)
        self.isdoc = int(isdoc)
        self.rdev = int(rdev)
        self.symlink = symlink

    def set_mtime(self):
        """Change mtime on the file in the FS, to match the RPM data"""
        path = self.path
        if path.startswith("/"):
            path = path[1:]
        if not os.path.islink(path):
            # We cannot call utime on broken symlinks
            os.utime(path, (self.mtime, self.mtime))


class SysVFileInfo:
    def __init__(self, rfi=None):
        """Create a SysVFileInfo instance from a RpmFileInfo instance"""
        if rfi != None:
            self._init_from_rfi(rfi)
        else:
            self.part = 1
            self.ftype = None
            self.klass = None
            self.pathname = None
            self.major = None
            self.minor = None
            self.mode = None
            self.owner = None
            self.group = None
            self.size = None
            self.cksum = None
            self.modtime = None


    def init_from_scriptfile(self, scriptfile):
        self.ftype = "i"
        self.pathname = os.path.basename(scriptfile)
        self.size = os.stat(scriptfile).st_size
        self.cksum = sysv_sum(scriptfile)
        self.modtime = os.stat(scriptfile).st_mtime
            

    def _init_from_rfi(self, rfi):
        # part
        self.part = 1

        # ftype
        if rfi.isconfig:
            self.ftype = "v" # Volatile
        elif stat.S_ISDIR(rfi.mode):
            self.ftype = "d"
        elif stat.S_ISCHR(rfi.mode):
            self.ftype = "c"
        elif stat.S_ISBLK(rfi.mode):
            self.ftype = "b"
        elif stat.S_ISREG(rfi.mode):
            self.ftype = "f"
        elif stat.S_ISFIFO(rfi.mode):
            self.ftype = "p"
        elif stat.S_ISLNK(rfi.mode):
            self.ftype = "s"
        elif stat.S_ISSOCK(rfi.mode):
            sys.exit("SysV pkgs cannot contain sockets")

        # class
        self.klass = "none"

        # pathname
        # FIXME: Should check for other special characters as well. 
        if (" " in rfi.path) or ("=" in rfi.path):
            sys.exit("Solaris packages cannot contain filenames with space or =")
        self.pathname = rfi.path
        if rfi.symlink and rfi.symlink != "X":
            self.pathname += "=" + rfi.symlink
        if self.pathname.startswith("/"):
            self.pathname = self.pathname[1:]

        # major, minor
        if self.ftype in ["b", "c"]:
            self.major = (rfi.rdev & 0xff00) >> 8
            self.minor = rfi.rdev & 0xff
        else:
            self.major = None
            self.minor = None

        # mode
        self.mode = stat.S_IMODE(rfi.mode)

        # owner, group
        if not self.ftype in ["l", "s", "i"]:
            self.owner = rfi.owner
            self.group = rfi.group
        else:
            self.owner = None
            self.group = None

        # size, cksum
        if not self.ftype in ["d", "x", "p", "b", "c", "s", "l"]:
            self.size = rfi.size
            self.cksum = sysv_sum(self.pathname)
        else:
            self.size = None
            self.cksum = None

        # modtime
        self.modtime = rfi.mtime


    def gen_pkgmap_line(self):
        s = "%d" % self.part
        s += " %s" % self.ftype
        if self.klass != None:
            s += " %s" % self.klass
        s += " %s" % self.pathname
        if not None in (self.major, self.minor):
            s += " %d %d" % (self.major, self.minor)
        if self.mode != None:
            s += " %o" % self.mode
        if self.owner and self.group:
            s += " %s %s" % (self.owner, self.group)
        if not None in (self.size, self.cksum):
            s += " %d %d" % (self.size, self.cksum)
        s += " %d" % self.modtime
        s += "\n"
        return s
        

def get_files_info(rpmfile):
    stdout, stdin = popen2.popen2(["rpm", "-qp", rpmfile, "--dump"])
    stdin.close()
    files = []
    while 1:
        line = stdout.readline().strip()
        if not line:
            break

        fields = line.split(" ")

        # path might contain spaces. This can be handled by splitting
        # the fields backwards. We will still have problems with
        # owners, groups and symlinks containing spaces, though. I
        # guess this is a FIXME. 
        num_pathfields = len(fields)-10
        pathfields = fields[:num_pathfields]
        path = " ".join(pathfields)
        fields = [path,] + fields[num_pathfields:]

        if not len(fields) == 11:
            print >>sys.stderr, "Invalid output from rpm --dump:"
            print >>sys.stderr, repr(line)
            sys.exit(1)

        files.append(RpmFileInfo(*fields))

    return files


def sysv_sum(filename):
    """sum -s"""
    f = open(filename)
    s = 0
    twopower32 = 2**32
    while 1:
        data = f.read(8192)
        if data == "":
            break
        for c in data:
            s += ord(c)
            # Note: As far as I understand, the SysV sum uses a 32 bit
            # algorithm.
            s = s % twopower32
    r = (s & 0xffff) + ((s & 0xffffffffL) >> 16);
    checksum = (r & 0xffff) + (r >> 16)
    return checksum


def usage():
    print >>sys.stderr, """
rpm2sysvpkg [-fh] <rpm-package> [output-object]

-h,--help             Show this help

-f                    Use filesystem (directory) format for output instead of
                      datastream format (do not call pkgtrans)
             
-p,--prefix <prefix>  Prefix package abbreviation with <prefix>
   """
    sys.exit(2)


def run_rpm_query(rpmfile, qstring):
    # Fetch from rpm. Oh I wish my process module was available...
    lang = os.getenv("LANG", "")
    os.putenv("LANG", "C")
    stdout, stdin = popen2.popen2(["rpm", "-qp", rpmfile, "--qf", qstring])
    os.putenv("LANG", lang)
    stdin.close()
    name = stdout.read().strip()
    if name == "":
        sys.exit("rpm query failed")
    return name


def get_rpm_name(rpmfile):
    return run_rpm_query(rpmfile, "%{NAME}")


def get_rpm_version(rpmfile):
    return run_rpm_query(rpmfile, "%{VERSION}-%{RELEASE}")


def get_rpm_summary(rpmfile):
    return run_rpm_query(rpmfile, "%{SUMMARY}")


def get_rpm_vendor(rpmfile):
    return run_rpm_query(rpmfile, "%{VENDOR}")


def get_rpm_url(rpmfile):
    return run_rpm_query(rpmfile, "%{URL}")


def get_rpm_packager(rpmfile):
    return run_rpm_query(rpmfile, "%{PACKAGER}")


def get_rpm_arch(rpmfile):
    return run_rpm_query(rpmfile, "%{ARCH}")


def get_sysv_pkg_abbrev(rpmname, prefix=""):
    """Get the SysV pkg NAME, from a rpm name"""
    pkg_abbrev = prefix + rpmname
    
    # Check for invalid chars. SysV allows + and -, but Solaris
    # pkginfo(4) does not say these are allowed. Following Solaris;
    # does not allow them. 
    allowed_chars = string.ascii_letters + string.digits
    delete_chars = ""
    for x in range(256):
        c = chr(x)
        if not c in allowed_chars:
            delete_chars += c
    new_abbrev = pkg_abbrev.translate(string.maketrans("", ""), delete_chars)
    if new_abbrev != pkg_abbrev:
        pkg_abbrev = new_abbrev
        print >>sys.stderr, "Warning: translated abbreviation to %s due to illegal characters" % pkg_abbrev

    # Check length
    if len(pkg_abbrev) > PKGABBREV_MAX:
        pkg_abbrev = pkg_abbrev[:PKGABBREV_MAX]
        print >>sys.stderr, "Warning: package abbreviation truncated to %s" % pkg_abbrev

    # Check resulting name
    if pkg_abbrev in ["install", "new", "all"]:
        sys.exit('Package abbreviation cannot be "install", "new", or "all"')
    
    return pkg_abbrev


def get_sysv_version(rpmname):
    # FIXME: Check for validity. 
    return get_rpm_version(rpmname)


def get_sysv_description(rpmname):
    # FIXME: Check for validity.
    return get_rpm_summary(rpmname)

def get_sysv_arch(rpmname):
    arch = get_rpm_arch(rpmname)
    if arch == "noarch":
        arch = "sparc,i386,ppc"
    return arch


get_sysv_name = get_sysv_description


def get_sysv_vendor(rpmname):
    # FIXME: Check for validity.
    vendor = get_rpm_vendor(rpmname)
    if vendor == "(none)":
        vendor = ""
    return vendor


def get_sysv_hotline(rpmname):
    # FIXME: Check for validity.
    return get_rpm_url(rpmname)


def get_sysv_email(rpmname):
    # FIXME: Check for validity.
    email = get_rpm_packager(rpmname)
    if email == "(none)":
        email = ""
    return email


def get_sysv_max_part_size(rpmname, num_files):
    """Get the max_part_size figure, by checking how many blocks the
    result from rpm2cpio is"""
    stdout, stdin = popen2.popen2(["rpm2cpio", rpmname])
    stdin.close()
    size = 0
    while 1:
        data = stdout.read(8192)
        if data == "":
            break
        size += len(data)

    if size == 0:
        sys.exit("rpm2cpio failed")
    
    data_blocks = size // 512 + 1
    # Now we have the size of the pkg part cpio archive *without* the
    # pkginfo and pkgmap files. The pkginfo file is probably not
    # larger then 2 * num_files blocks (each line max 1024
    # chars). FIXME: Make me better.
    pkgmap_blocks = 2 * num_files
    # pkginfo is probably not larger than 8k. FIXME: Better. 
    pkginfo_blocks = 16
    return data_blocks + pkgmap_blocks + pkginfo_blocks



def create_procedure_scripts(rpmfile, unpacked_dir):
    preinstall = []
    postinstall = []
    preuninstall = []
    postuninstall = []
    devnull = []
    current = devnull
    scripts_sfi = []

    lang = os.getenv("LANG", "")
    os.putenv("LANG", "C")
    stdout, stdin = popen2.popen2(["rpm", "-qp", rpmfile, "--scripts"])
    os.putenv("LANG", lang)
    stdin.close()
    while 1:
        line = stdout.readline()
        if not line:
            break

        if line.endswith("\n"):
            line = line[:-1]

        if line.startswith("preinstall program:"):
            preinstall = [line.split(":", 1)[1]]
            current = devnull
        elif line.startswith("preinstall scriptlet") and line.endswith(":"):
            current = preinstall

        elif line.startswith("postinstall program:"):
            postinstall = [line.split(":", 1)[1]]
            current = devnull
        elif line.startswith("postinstall scriptlet") and line.endswith(":"):
            current = postinstall

        elif line.startswith("preuninstall program:"):
            preuninstall = [line.split(":", 1)[1]]
            current = devnull
        elif line.startswith("preuninstall scriptlet") and line.endswith(":"):
            current = preuninstall

        elif line.startswith("postuninstall program:"):
            postuninstall = [line.split(":", 1)[1]]
            current = devnull
        elif line.startswith("postuninstall scriptlet") and line.endswith(":"):
            current = postuninstall

        else:
            current.append(line)

    preinstall = "\n".join(preinstall)
    postinstall = "\n".join(postinstall)
    preuninstall = "\n".join(preuninstall)
    postuninstall = "\n".join(postuninstall)

    install_dir = os.path.join(unpacked_dir, "install")
    os.mkdir(install_dir)

    if preinstall:
        preinstall_filename = os.path.join(install_dir, "preinstall")
        preinstall_file = open(preinstall_filename, "w")
        preinstall_file.write(preinstall)
        preinstall_file.close()
        s = SysVFileInfo()
        s.init_from_scriptfile(preinstall_filename)
        scripts_sfi.append(s)

    if postinstall:
        postinstall_filename = os.path.join(install_dir, "postinstall")
        postinstall_file = open(postinstall_filename, "w")
        postinstall_file.write(postinstall)
        postinstall_file.close()
        s = SysVFileInfo()
        s.init_from_scriptfile(postinstall_filename)
        scripts_sfi.append(s)

    if preuninstall:
        preuninstall_filename = os.path.join(install_dir, "preremove")
        preuninstall_file = open(preuninstall_filename, "w")
        preuninstall_file.write(preuninstall)
        preuninstall_file.close()
        s = SysVFileInfo()
        s.init_from_scriptfile(preuninstall_filename)
        scripts_sfi.append(s)

    if postuninstall:
        postuninstall_filename = os.path.join(install_dir, "postremove")
        postuninstall_file = open(postuninstall_filename, "w")
        postuninstall_file.write(postuninstall)
        postuninstall_file.close()
        s = SysVFileInfo()
        s.init_from_scriptfile(postuninstall_filename)
        scripts_sfi.append(s)

    return scripts_sfi


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "fhp:",
                                   ["fsformat", "help", "prefix="])
    except getopt.GetoptError:
        usage()

    fsformat = 0
    abbrev_prefix = ""

    for o, a in opts:
        if o == "-f":
            fsformat = 1
        if o in ("-h", "--help"):
            usage()
        if o in ("-p", "--prefix"):
            abbrev_prefix = a

    if len(args) not in [1, 2]:
        usage()

    rpmfile = os.path.abspath(args[0])
    rpmname = get_rpm_name(rpmfile)
    sysv_abbrev = get_sysv_pkg_abbrev(rpmname, abbrev_prefix)
    sysv_version = get_sysv_version(rpmfile)
    default_outfile = sysv_abbrev + "-" + sysv_version + "-" + get_rpm_arch(rpmfile)

    #
    # Determine output object
    #
    if len(args) == 2:
        # The output argument was specified. 
        output = args[1]
        if os.path.isdir(output):
            # Existing directory. Append default output name. 
            output = os.path.join(output, default_outfile)
    else:
        # Default output file is PKG-VERSION-ARCH, in current directory. 
        output = default_outfile
    output = os.path.abspath(output)

    #
    # Determine and create package build directory
    #
    if fsformat:
        unpacked_dir = output
    else:
        tempdir = tempfile.mktemp("rpm2sysvpkg")
        os.mkdir(tempdir)
        unpacked_dir = os.path.join(tempdir, sysv_abbrev)

    try:
        if not os.path.exists(unpacked_dir):
            os.mkdir(unpacked_dir)    
        os.mkdir(os.path.join(unpacked_dir, "reloc"))
    except OSError, e:
        print >>sys.stderr, "Cannot create build directory:", e
        

    #
    # Unpack the RPM files into the reloc directory
    #
    os.chdir(os.path.join(unpacked_dir, "reloc"))
    os.system("rpm2cpio '%s' | cpio --quiet -id" % rpmfile)

    #
    # Create the pkginfo file
    #
    pkginfo = open(os.path.join(unpacked_dir, "pkginfo"), "w")
    # PKG 
    pkginfo.write("PKG=%s\n" % sysv_abbrev)
    # NAME
    pkginfo.write("NAME=%s\n" % get_sysv_name(rpmfile))
    pkginfo.write("ARCH=%s\n" % get_sysv_arch(rpmfile))
    pkginfo.write("VERSION=%s\n" % sysv_version)
    pkginfo.write("DESC=%s\n" % get_sysv_description(rpmfile))
    pkginfo.write("VENDOR=%s\n" % get_sysv_vendor(rpmfile))
    pkginfo.write("HOTLINE=%s\n" % get_sysv_hotline(rpmfile))
    pkginfo.write("EMAIL=%s\n" % get_sysv_email(rpmfile))
    pkginfo.write("CATEGORY=application\n") # Sometimes in the future, we might try a translation
    # FIXME: Is this correct?
    pkginfo.write("BASEDIR=/\n")
    pkginfo.write("CLASSES=none\n")
    pkginfo.close()

    #
    # Create procedure scripts, if any
    #
    scripts_sfi = create_procedure_scripts(rpmfile, unpacked_dir)

    #
    # Create the pkgmap file
    #
    pkgmap = open(os.path.join(unpacked_dir, "pkgmap"), "w")
    rfis = get_files_info(rpmfile)
    pkgmap.write(": 1 %d\n" % get_sysv_max_part_size(rpmfile, len(rfis)))
    for rfi in rfis:
        rfi.set_mtime()
        sfi = SysVFileInfo(rfi)
        pkgmap.write(sfi.gen_pkgmap_line())
    for sfi in scripts_sfi:
        pkgmap.write(sfi.gen_pkgmap_line())

    pkgmap.close()

    #
    # Call pkgtrans, if needed
    #
    if not fsformat:
        # Convert to stream format, by calling pkgtrans
        newpath = os.getenv("PATH", "") + ":" + ORIGIN
        os.environ["PATH"] = newpath
        args = ["pkgtrans", unpacked_dir, output]
        ret = os.spawnvp(os.P_WAIT, args[0], args)
        if ret != 0:
            print >>sys.stderr, "Execution of pkgtrans failed with returncode", ret
            print >>sys.stderr, "Make sure pkgtrans is in PATH, or the same dir as rpm2sysvpkg."
        
        shutil.rmtree(tempdir)

    print >>sys.stderr, "Wrote", output


if __name__ == "__main__":
    main()
    
